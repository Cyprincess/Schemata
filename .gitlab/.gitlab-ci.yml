variables:
  CI_IMAGE_WINDOWS: mcr.microsoft.com/dotnet/sdk:6.0-windowsservercore-ltsc2022
  CI_IMAGE_LINUX: mcr.microsoft.com/dotnet/sdk:6.0-bullseye-slim

.cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-${CI_SYSTEM}
    paths:
      - .packages
      - artifacts/bin
      - artifacts/obj

.environment:
  needs:
    - &environment
      job: prepare
      artifacts: true

.matrix:
  parallel:
    matrix:
      - CI_SYSTEM: linux
        CI_IMAGE: ${CI_IMAGE_LINUX}
      - CI_SYSTEM: windows
        CI_IMAGE: ${CI_IMAGE_WINDOWS}
  image: ${CI_IMAGE}
  tags:
    - ${CI_SYSTEM}

stages:
  - prepare
  - build
  - test
  - publish

prepare:
  stage: prepare
  image: mcr.microsoft.com/powershell:latest
  script:
    - >
      pwsh -c '
      $Now = (Get-Date).ToUniversalTime();
      $Hours = $Now.Hour * 4;
      $QuarterHours = [Math]::Floor($Now.Minute / 15.0);
      $Revision = $Hours + $QuarterHours + 1;
      $BuildId = $Now.ToString("yyyyMMdd") + "." + $Revision;
      Write-Output "_ComputedOfficialBuildId=${BuildId}" | Out-File -FilePath prepare.env -Encoding utf8 -Append;
      Write-Output "DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true" | Out-File -FilePath prepare.env -Encoding utf8 -Append;
      Write-Output "DOTNET_CLI_TELEMETRY_OPTOUT=true" | Out-File -FilePath prepare.env -Encoding utf8 -Append;
      '
  artifacts:
    reports:
      dotenv: prepare.env

build:windows:
  stage: build
  extends:
    - .cache
    - .environment
  variables:
    CI_SYSTEM: windows
  image: ${CI_IMAGE_WINDOWS}
  script:
    - .\eng\common\CIBuild.cmd -configuration Release -integrationTest
  artifacts:
    name: packages
    paths:
      - artifacts/packages/Release/Shipping/*.nupkg
      - artifacts/packages/Release/Shipping/*.snupkg
  tags:
    - ${CI_SYSTEM}

build:linux:
  stage: build
  extends:
    - .cache
    - .environment
  variables:
    CI_SYSTEM: linux
  image: ${CI_IMAGE_LINUX}
  script:
    - ./eng/common/cibuild.sh -configuration Release -integrationTest
  tags:
    - ${CI_SYSTEM}

coverage:
  stage: test
  extends:
    - .cache
    - .matrix
  script:
    - >
      dotnet test -c Release
      /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage.cobertura.xml
  coverage: /Total\s*\|\s*(\d+(?:\.\d+)?)/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: tests/**/coverage.cobertura.xml
  rules:
    - if: $CI_SYSTEM == 'windows'
      needs:
        - *environment
        - job: build:windows
          artifacts: false
    - if: $CI_SYSTEM == 'linux'
      needs:
        - *environment
        - job: build:linux
          artifacts: false

publish:
  stage: publish
  extends: .environment
  image: ${CI_IMAGE_WINDOWS}
  script:
    - cd artifacts/packages/Release/Shipping/
    - >
      dotnet nuget push *.nupkg
      --source "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json"
      --api-key ${CI_JOB_TOKEN}
  tags:
    - windows
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == 'master'
  needs:
    - job: build:windows
      artifacts: true
    - job: build:linux
      artifacts: false
